##################
#####Outliers#####
##################

###########PCAdapt Outliers###########

######R######
#data formatting
library(plyr)
library(reshape2)
library(splitstackshape)
library(tidyverse)

#data analysis
library(pcadapt)
library(qvalue)

##### Load Metadata #####
#convert ped data to genepop using PGDspider
#read in individual and pop names from the .fam file
SNPs_MissingRemoved_HWE_LD2_PopIndiv <- read.delim("/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.fam",sep="",header=F) %>% 
  dplyr::rename(Pop=V1,Indiv=V2) %>% 
  dplyr::select(Pop,Indiv) 
SNPs_MissingRemoved_HWE_LD2_Indivs <- SNPs_MissingRemoved_HWE_LD2_PopIndiv

#read in metadata
AllSample_metadata <- read.csv("/data/AllMetadata.csv") %>% 
  dplyr::select(SampleID,Pop,Sex,Total_Age) %>% 
  dplyr::rename(ID=SampleID)

#read in SNP names from the .bim file
SNPs_MissingRemoved_HWE_LD2_SNPs <- read.delim("/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.bim",sep="",header=F) %>% 
  dplyr::rename(SNP=V2) %>% 
  dplyr::select(SNP)
SNPs_MissingRemoved_HWE_LD2_SNPs <- SNPs_MissingRemoved_HWE_LD2_SNPs[[1]]

#load SNP and Individual read depths from All SNPs, before filtering with populations
SNPs_SampleIDs <- read.delim("/data/04_Aligned/gStacks/VCFSampleIDs.txt",header=F)[[1]]

#load total depth per SNP per sample
SNPs_MissingRemoved_HWE_LD2_Depths <- read.delim(/data/04_Aligned/gStacks/ReadDepthPerSNPPerIndiv.txt",header=F,na.strings = ".") %>% #load read depths for all SNPs
  setNames(c("Name",SNPs_SampleIDs)) %>% 
  mutate(Name2=Name) %>% 
  separate_wider_delim(cols=Name2, delim = " ", names=c("CHROM","POS","SNP","Junk")) %>% 
  dplyr::mutate(SNP = str_replace(SNP,":","_")) %>% 
  dplyr::mutate(SNP = str_remove(SNP, "[:][+]")) %>% 
  dplyr::mutate(SNP = str_remove(SNP, "[:][-]")) %>% 
  relocate(SNP, .before=Name) %>% 
  dplyr::select(!c(Name,CHROM,POS,Junk)) %>% 
  filter(SNP %in% SNPs_MissingRemoved_HWE_LD2_SNPs) %>% #keep only the SNPs that are in the final dataset
  dplyr::select(c(SNP, all_of(SNPs_MissingRemoved_HWE_LD2_Indivs))) %>% #keep only the individuals that are in the final dataset
  mutate(TotalSNPDepth = rowSums(.[2:ncol(.)], na.rm=T)) %>% 
  mutate(MeanSNPDepth = round(rowMeans(.[,2:ncol(.)], na.rm=T))) %>% 
  relocate(c(TotalSNPDepth,MeanSNPDepth), .after=SNP) 

#total depth per SNP
SNPs_MissingRemoved_HWE_LD2_TotalSNPDepths <- SNPs_MissingRemoved_HWE_LD2_Depths %>% 
  dplyr::select(SNP,TotalSNPDepth,MeanSNPDepth)

#total and mean depth per indiv
SNPs_MissingRemoved_HWE_LD2_TotalIndivDepths <- SNPs_MissingRemoved_HWE_LD2_Depths %>% 
  dplyr::select(!c(TotalSNPDepth,MeanSNPDepth)) %>% 
  pivot_longer(!SNP,names_to = "ID", values_to = "Depth") %>% #transpose so Individuals are rows
  mutate(Depth=as.numeric(Depth)) %>% 
  pivot_wider(names_from = "SNP", values_from = "Depth") %>% 
  mutate(TotalIndivDepth = rowSums(.[,2:ncol(.)], na.rm=T)) %>% 
  relocate(TotalIndivDepth, .after=ID) %>% 
  mutate(MeanIndivDepth = round(rowMeans(.[,3:ncol(.)], na.rm=T))) %>% 
  relocate(MeanIndivDepth, .after=TotalIndivDepth) %>% 
  dplyr::select(ID,TotalIndivDepth,MeanIndivDepth)

ReadDepthPerIndiv_SNPs_MissingRemoved_HWE_LD2_Histo <- ggplot(data = SNPs_MissingRemoved_HWE_LD2_TotalIndivDepths,
                                                                aes(x=TotalIndivDepth)) +
  geom_histogram(bins=50) +
  ylab('Count of Individuals') + 
  xlab("Total Read Depth Across all SNPs") +
  theme_bw() +
  theme(axis.title=element_text(size = 20),
        legend.title=element_blank(),
        panel.border = element_rect(linewidth =0.5),
        plot.margin=unit(c(5,5,7,5), "mm"),panel.grid=element_blank());
ggsave(ReadDepthPerIndiv_SNPs_MissingRemoved_HWE_LD2_Histo, 
       file = /data/04_Aligned/gStacks/ReadDepthPerIndiv_SNPs_MissingRemoved_HWE_LD2_Histo.pdf", 
       height = 8,width = 16, units = "in")

##### Load Genetic Data #####
SNPs_MissingRemoved_HWE_LD2_PCAdapt <- read.pcadapt(input = "/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.bed", type="bed")

#Run PCadapt
PCA_SNPs_MissingRemoved_HWE_LD2 <- pcadapt(SNPs_MissingRemoved_HWE_LD2_PCAdapt, K=2, min.maf=0.01)
plot(PCA_SNPs_MissingRemoved_HWE_LD2, option = "screeplot") #k=2 is the optimal K
plot(PCA_SNPs_MissingRemoved_HWE_LD2, option = "scores", pop = SNPs_MissingRemoved_HWE_LD2_PopIndiv$Pop)

#Extract outliers
summary(PCA_SNPs_MissingRemoved_HWE_LD2)
plot(PCA_SNPs_MissingRemoved_HWE_LD2, option="qqplot")
plot(PCA_SNPs_MissingRemoved_HWE_LD2, option="manhattan")
hist(PCA_SNPs_MissingRemoved_HWE_LD2$pvalues, breaks=100)
plot(PCA_SNPs_MissingRemoved_HWE_LD2, option="stat.distribution")

alpha <- 0.05 #FDR of 5%

Pvalues_PCA_SNPs_MissingRemoved_HWE_LD2 <- as.data.frame(PCA_SNPs_MissingRemoved_HWE_LD2$pvalues)
Pvalues_PCA_SNPs_MissingRemoved_HWE_LD2$SNPs <- SNPs_MissingRemoved_HWE_LD2_SNPs
colnames(Pvalues_PCA_SNPs_MissingRemoved_HWE_LD2$SNPs) <- c("pval","SNP")

#q-value
Pvalues_PCA_SNPs_MissingRemoved_HWE_LD2$qval <- qvalue(Pvalues_PCA_SNPs_MissingRemoved_HWE_LD2$pval)$qvalues
Pvalues_PCA_SNPs_MissingRemoved_HWE_LD2 <- Pvalues_PCA_SNPs_MissingRemoved_HWE_LD2 %>% 
  mutate(qval_outliers = case_when(is.na(qval) ~ "unknown",
                                   qval < alpha ~ "outlier",
                                   qval >= alpha ~ "neutral",
                                   .default = "fail"))
table(Pvalues_PCA_SNPs_MissingRemoved_HWE_LD2$qval_outliers) # 18 outliers

#output list of outliers
Outliers_PCA_SNPs_MissingRemoved_HWE_LD2 <- Pvalues_PCA_SNPs_MissingRemoved_HWE_LD2 %>% 
  filter(qval_outliers == "outlier")
write_lines(Outliers_PCA_SNPs_MissingRemoved_HWE_LD2$SNP, 
            file="/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2_PCadaptOutliers.txt", sep="\n")

######plink######
#extract PCadapt outliers
plink --bfile /data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2 \
--extract SNPs_MissingRemoved_HWE_LD2_PCadaptOutliers.txt \
--make-bed --recode \
--out /data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2_PCAdaptOutliers --allow-extra-chr

###########BayeScan Outliers###########

######bash######
#Create and load conda environment
conda create -n HM_RAD_BAYESCAN -c bioconda
conda activate HM_RAD_BAYESCAN
conda install -c conda-forge -c bioconda bayescan 

#run BayeScan
./BayeScan2.1_linux64bits /data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2_BS.txt -od /data/05_Filtered/Aligned/MissingRemoved/BayescanOutput/

######R######
#make sure to load plot_R.r from the BayeScan program directory before plotting
plot_bayescan("/data/05_Filtered/Aligned/MissingRemoved/BayescanOutput/SNPs_MissingRemoved_HWE_LD2_BS_fst.txt", FDR=0.05)
plot_bayescan("/data/05_Filtered/Aligned/MissingRemoved/BayescanOutput/SNPs_MissingRemoved_HWE_LD2_BS_fst.txt", FDR=0.05)$outliers #3 outliers, the position number of outliers in the table matches order in the data file

#load output values and add in SNP name
BS_output <- read_table("/data/05_Filtered/Aligned/MissingRemoved/BayescanOutput/SNPs_MissingRemoved_HWE_LD2_BS_fst.txt", FDR=0.05), col_names = c("SNPNumber","prob","log1o(PO)","qval","alpha","fst")) %>% 
  filter(!row_number() %in% c(1)) %>% 
  mutate(SNP = SNPs_MissingRemoved_HWE_LD2_SNPs,
         Outlier = case_when(SNPNumber %in% c(287,4953,7110) ~ "outlier", .default = "neutral")) #these are the row numbers for the 3 outliers detected

write_lines(subset(BS_output, BS_output$Outlier == "outlier")$SNP, file="/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2_BayeScanOutliers.txt", sep="\n")

######plink######
#use plink to generate file of only bayescan outliers
plink --bfile /data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2 \
--extract SNPs_MissingRemoved_HWE_LD2_BayeScanOutliers.txt \
--make-bed --recode \
--out /data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2_BayeScanOutliers --allow-extra-chr

#########################
#####Diversity Stats#####
#########################

######R######
#data formatting
library(plyr)
library(reshape2)
library(splitstackshape)
library(tidyverse)

#data analysis
library(adegenet)
library(hierfstat)
library(dartR)
library(stAMPP)
library(stats)

#NOTE:example code is only shown for one dataset

#read in individual and pop names from the .fam file
SNPs_MissingRemoved_HWE_LD2_PopIndiv <- read.delim("/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.fam",sep="",header=F) %>% 
  dplyr::rename(Pop=V1,Indiv=V2) %>% 
  dplyr::select(Pop,Indiv) 
SNPs_MissingRemoved_HWE_LD2_Indivs <- SNPs_MissingRemoved_HWE_LD2_PopIndiv$Indiv

#load genepop file
SNPs_MissingRemoved_HWE_LD2_GP <- read.genepop("/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.gen", ncode=3)
SNPs_MissingRemoved_HWE_LD2_GP$pop #Levels: 29W2242635 HM22_42275 Bio2242698 ESI2342156 GM2242438 IC2342188 SI2242505
#fix the pop names
levels(SNPs_MissingRemoved_HWE_LD2_GP$pop) <- c("29W","BI","Bio","ESI","GM","IC","SI")

#MAF (adegenet)
SNPs_MissingRemoved_HWE_LD2_MAF <- data.frame(minorAllele(SNPs_MissingRemoved_HWE_LD2_GP)) %>% 
  rownames_to_column(var="SNP") %>% 
  rename(MAF = "minorAllele.SNPs_MissingRemoved_HWE_LD2_GP.")
range(SNPs_MissingRemoved_HWE_LD2_MAF$MAF)
hist(SNPs_MissingRemoved_HWE_LD2_MAF$MAF, breaks=100)

#split into different genind object per pop
IC_SNPs_MissingRemoved_HWE_LD2_GP <- SNPs_MissingRemoved_HWE_LD2_GP[381:398,]
ESI_SNPs_MissingRemoved_HWE_LD2_GP <- SNPs_MissingRemoved_HWE_LD2_GP[235:298,]
SI_SNPs_MissingRemoved_HWE_LD2_GP <- SNPs_MissingRemoved_HWE_LD2_GP[399:472,]
Bio_SNPs_MissingRemoved_HWE_LD2_GP <- SNPs_MissingRemoved_HWE_LD2_GP[149:234,]
GM_SNPs_MissingRemoved_HWE_LD2_GP <- SNPs_MissingRemoved_HWE_LD2_GP[299:380,]
BI_SNPs_MissingRemoved_HWE_LD2_GP <- SNPs_MissingRemoved_HWE_LD2_GP[81:148,]
W29_SNPs_MissingRemoved_HWE_LD2_GP <- SNPs_MissingRemoved_HWE_LD2_GP[1:80,]

#Per Locus Ho, He (adegenet)
SumOverall_SNPs_MissingRemoved_HWE_LD2_GP <- summary(SNPs_MissingRemoved_HWE_LD2_GP)
SumIC_SNPs_MissingRemoved_HWE_LD2_GP <- summary(IC_SNPs_MissingRemoved_HWE_LD2_GP)
SumESI_SNPs_MissingRemoved_HWE_LD2_GP <- summary(ESI_SNPs_MissingRemoved_HWE_LD2_GP)
SumSI_SNPs_MissingRemoved_HWE_LD2_GP <- summary(SI_SNPs_MissingRemoved_HWE_LD2_GP)
SumBio_SNPs_MissingRemoved_HWE_LD2_GP <- summary(Bio_SNPs_MissingRemoved_HWE_LD2_GP)
SumGM_SNPs_MissingRemoved_HWE_LD2_GP <- summary(GM_SNPs_MissingRemoved_HWE_LD2_GP)
SumBI_SNPs_MissingRemoved_HWE_LD2_GP <- summary(BI_SNPs_MissingRemoved_HWE_LD2_GP)
Sum29W_SNPs_MissingRemoved_HWE_LD2_GP <- summary(W29_SNPs_MissingRemoved_HWE_LD2_GP)

mean(SumOverall_SNPs_MissingRemoved_HWE_LD2_GP$Hobs) #mean overall per-locus Ho
mean(SumOverall_SNPs_MissingRemoved_HWE_LD2_GP$Hexp)  #mean overall per-locus He

#Test if Ho is different than He (stats)
#IC
bartlett.test(list(SumIC_SNPs_MissingRemoved_HWE_LD2_GP$Hexp,SumIC_SNPs_MissingRemoved_HWE_LD2_GP$Hobs)) #check is variances are the same for ttest
t.test(SumIC_SNPs_MissingRemoved_HWE_LD2_GP$Hexp,SumIC_SNPs_MissingRemoved_HWE_LD2_GP$Hobs,pair=T,var.equal=F,alter="greater")
#ESI
bartlett.test(list(SumESI_SNPs_MissingRemoved_HWE_LD2_GP$Hexp,SumESI_SNPs_MissingRemoved_HWE_LD2_GP$Hobs))
t.test(SumESI_SNPs_MissingRemoved_HWE_LD2_GP$Hexp,SumESI_SNPs_MissingRemoved_HWE_LD2_GP$Hobs,pair=T,var.equal=F,alter="greater")
#SI
bartlett.test(list(SumSI_SNPs_MissingRemoved_HWE_LD2_GP$Hexp,SumSI_SNPs_MissingRemoved_HWE_LD2_GP$Hobs))
t.test(SumSI_SNPs_MissingRemoved_HWE_LD2_GP$Hexp,SumSI_SNPs_MissingRemoved_HWE_LD2_GP$Hobs,pair=T,var.equal=F,alter="greater")
#Bio
bartlett.test(list(SumBio_SNPs_MissingRemoved_HWE_LD2_GP$Hexp,SumBio_SNPs_MissingRemoved_HWE_LD2_GP$Hobs))
t.test(SumBio_SNPs_MissingRemoved_HWE_LD2_GP$Hexp,SumBio_SNPs_MissingRemoved_HWE_LD2_GP$Hobs,pair=T,var.equal=F,alter="greater")
#GM
bartlett.test(list(SumGM_SNPs_MissingRemoved_HWE_LD2_GP$Hexp,SumGM_SNPs_MissingRemoved_HWE_LD2_GP$Hobs))
t.test(SumGM_SNPs_MissingRemoved_HWE_LD2_GP$Hexp,SumGM_SNPs_MissingRemoved_HWE_LD2_GP$Hobs,pair=T,var.equal=F,alter="greater")
#BI
bartlett.test(list(SumBI_SNPs_MissingRemoved_HWE_LD2_GP$Hexp,SumBI_SNPs_MissingRemoved_HWE_LD2_GP$Hobs))
t.test(SumBI_SNPs_MissingRemoved_HWE_LD2_GP$Hexp,SumBI_SNPs_MissingRemoved_HWE_LD2_GP$Hobs,pair=T,var.equal=F,alter="greater")
#29W
bartlett.test(list(Sum29W_SNPs_MissingRemoved_HWE_LD2_GP$Hexp,Sum29W_SNPs_MissingRemoved_HWE_LD2_GP$Hobs))
t.test(Sum29W_SNPs_MissingRemoved_HWE_LD2_GP$Hexp,Sum29W_SNPs_MissingRemoved_HWE_LD2_GP$Hobs,pair=T,var.equal=F,alter="greater")

#Pop specific He, Ho (adegenet)
He_SNPs_MissingRemoved_HWE_LD2_GP <- as.data.frame(adegenet::Hs(SNPs_MissingRemoved_HWE_LD2_GP)) %>% rename(Hs = "adegenet::Hs(SNPs_MissingRemoved_HWE_LD2_GP)") %>% 
  rownames_to_column(var="Pop") 
Ho_SNPs_MissingRemoved_HWE_LD2_GP <- (as.data.frame(mean(SumIC_SNPs_MissingRemoved_HWE_LD2_GP$Hobs)) %>% mutate(Pop="IC") %>% setNames(c("Ho","Pop"))) %>% 
  rbind(as.data.frame(mean(SumESI_SNPs_MissingRemoved_HWE_LD2_GP$Hobs)) %>% mutate(Pop="ESI") %>% setNames(c("Ho","Pop")),
        as.data.frame(mean(SumSI_SNPs_MissingRemoved_HWE_LD2_GP$Hobs)) %>% mutate(Pop="SI") %>% setNames(c("Ho","Pop")),
        as.data.frame(mean(SumBio_SNPs_MissingRemoved_HWE_LD2_GP$Hobs)) %>% mutate(Pop="Bio") %>% setNames(c("Ho","Pop")),
        as.data.frame(mean(SumGM_SNPs_MissingRemoved_HWE_LD2_GP$Hobs)) %>% mutate(Pop="GM") %>% setNames(c("Ho","Pop")),
        as.data.frame(mean(SumBI_SNPs_MissingRemoved_HWE_LD2_GP$Hobs)) %>% mutate(Pop="BI") %>% setNames(c("Ho","Pop")),
        as.data.frame(mean(Sum29W_SNPs_MissingRemoved_HWE_LD2_GP$Hobs)) %>% mutate(Pop="29W") %>% setNames(c("Ho","Pop")))

#Pop specific Fst (hierfstat)
PopSpecFst_SNPs_MissingRemoved_HWE_LD2_GP <- as.data.frame(betas(SNPs_MissingRemoved_HWE_LD2_GP)$betaiovl) %>% 
  rename(Fst="betas(SNPs_MissingRemoved_HWE_LD2_GP)$betaiovl") %>% rownames_to_column(var="Pop")
#bootstrap popSpec Fst
betas(SNPs_MissingRemoved_HWE_LD2_GP,
      nboot = 10000,
      lim=c(0.025,0.975),
      diploid=T,
      betaijT=F)

#Overall basic stats (hierfstat)
StatsOverall_SNPs_MissingRemoved_HWE_LD2_GP <- basic.stats(SNPs_MissingRemoved_HWE_LD2_GP)
StatsOverall_SNPs_MissingRemoved_HWE_LD2_GP$overall

#Pop specific Fis (hierfstat)
Fis_SNPs_MissingRemoved_HWE_LD2_GP <- (as.data.frame(t(basic.stats(IC_SNPs_MissingRemoved_HWE_LD2_GP)$overall)) %>% mutate(Pop="IC") %>% dplyr::select(Pop,Fis)) %>% 
  rbind(as.data.frame(t(basic.stats(ESI_SNPs_MissingRemoved_HWE_LD2_GP)$overall)) %>% mutate(Pop="ESI")%>% dplyr::select(Pop,Fis),
        as.data.frame(t(basic.stats(SI_SNPs_MissingRemoved_HWE_LD2_GP)$overall)) %>% mutate(Pop="SI")%>% dplyr::select(Pop,Fis),
        as.data.frame(t(basic.stats(Bio_SNPs_MissingRemoved_HWE_LD2_GP)$overall)) %>% mutate(Pop="Bio")%>% dplyr::select(Pop,Fis),
        as.data.frame(t(basic.stats(GM_SNPs_MissingRemoved_HWE_LD2_GP)$overall)) %>% mutate(Pop="GM")%>% dplyr::select(Pop,Fis),
        as.data.frame(t(basic.stats(BI_SNPs_MissingRemoved_HWE_LD2_GP)$overall)) %>% mutate(Pop="BI")%>% dplyr::select(Pop,Fis),
        as.data.frame(t(basic.stats(W29_SNPs_MissingRemoved_HWE_LD2_GP)$overall)) %>% mutate(Pop="29W")%>% dplyr::select(Pop,Fis))

SumStatsPop_SNPs_MissingRemoved_HWE_LD2_GP <- He_SNPs_MissingRemoved_HWE_LD2_GP %>% #adegenet
  join(Ho_SNPs_MissingRemoved_HWE_LD2_GP) %>% #adegenet
  join(PopSpecFst_SNPs_MissingRemoved_HWE_LD2_GP) %>% #hierfstat
  join(Fis_SNPs_MissingRemoved_HWE_LD2_GP) #hierfstat
  
write_tsv(SumStatsPop_SNPs_MissingRemoved_HWE_LD2_GP,
          col_names = T,
          file="/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2_SummaryStats.txt")

#Pairwise Pop specific Fst (hierfstat)
PWNeiFst_SNPs_MissingRemoved_HWE_LD2_GP <- genet.dist(SNPs_MissingRemoved_HWE_LD2_GP, method="Nei87")
PWWCFst_SNPs_MissingRemoved_HWE_LD2_GP <- genet.dist(SNPs_MissingRemoved_HWE_LD2_GP, method="WC84")

#Pairwise Pop specific Fst (StAMMP)
PWWCFst_Stampp_SNPs_MissingRemoved_HWE_LD2_GP <- stamppFst(stamppConvert(SNPs_MissingRemoved_HWE_LD2_GP, type="genlight"),  #linux only
                                                            nboots = 100, 
                                                            percent = 95, 
                                                            nclusters = (detectCores()-40))

PWWCFst_Stampp_SNPs_MissingRemoved_HWE_LD2_GP$Fsts
PWWCFst_Stampp_SNPs_MissingRemoved_HWE_LD2_GP$Pvalues

#convert data to long format
PWWCFst_Stampp_SNPs_MissingRemoved_HWE_LD2_GP_Fst <- PWWCFst_Stampp_SNPs_MissingRemoved_HWE_LD2_GP$Fsts
PWWCFst_Stampp_SNPs_MissingRemoved_HWE_LD2_GP_Pval <- PWWCFst_Stampp_SNPs_MissingRemoved_HWE_LD2_GP$Pvalues

PWWCFst_Stampp_SNPs_MissingRemoved_HWE_LD2_GP_Fst_long <- as.data.frame(melt(PWWCFst_Stampp_SNPs_MissingRemoved_HWE_LD2_GP_Fst)) %>% 
  rename(Pop1 = Var1, Pop2=Var2, Fst=value)
Fst_MAF001_R75_n475_RandomSNP_HWE_Fst_long <- as.data.frame(melt(PWWCFst_Stampp_SNPs_MissingRemoved_HWE_LD2_GP_Pval)) %>% 
  rename(Pop1 = Var1, Pop2=Var2, Pval=value)

PWWCFst_Stampp_SNPs_MissingRemoved_HWE_LD2_GP_Fst_long <- Fst_MAF001_R75_n475_RandomSNP_HWE_Fst_long %>% 
  full_join(Fst_MAF001_R75_n475_RandomSNP_HWE_Fst_long) %>% 
  mutate(Fst = round(Fst, 5)) %>% 
  na.omit() %>% 
  mutate(FstLabel = case_when(Pval < 0.05 ~ paste0(Fst,"*"),
                              .default = Fst))

#heatmap of PW Fst
PWWCFst_Stampp_SNPs_MissingRemoved_HWE_LD2_GP_Fst_plot <- ggplot(PWWCFst_Stampp_SNPs_MissingRemoved_HWE_LD2_GP_Fst_long, 
                                                aes(x = Pop2, y = ordered(Pop1, levels = rev(levels(Pop2))), fill = Pval)) +
  geom_tile() +
  geom_text(aes(label=Fst))+
  scale_fill_distiller(palette = "Spectral", na.value = "white") +
  ggtitle(expression(MAF001_R75_n475_RandomSNP_HWE~~F[ST])) +
  labs(fill = "p value") +
  theme_bw() +
  theme(plot.title = element_text(size=22),
        legend.position = "right", 
        legend.title = element_text(size=22), 
        legend.text = element_text(size=15),
        legend.key = element_blank(), 
        axis.text.x = element_text(size = 22),
        axis.text.y = element_text(size = 22),
        axis.title= element_blank(), 
        plot.margin = unit(c(5,5,7,5), "mm"),
        panel.border = element_rect(linewidth = 1),
        panel.grid.major=element_blank()) +
  NULL

###Nei's D (StAMPP)
NeiDSNPs_MissingRemoved_HWE_LD2 <- stamppNeisD(stamppConvert(SNPs_MissingRemoved_HWE_LD2_GP, type="genlight"),  #linux only
                                                nboots = 100, 
                                                percent = 95, 
                                                nclusters = (detectCores()-40))

###Genomic Relatedness Matrix (StAMPP)
#read in individual and pop names from the .fam file
SNPs_MissingRemoved_HWE_LD2_PopIndiv <- read.delim("/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.fam",sep="",header=F) %>% 
  dplyr::rename(Pop=V1,Indiv=V2) %>% 
  dplyr::select(Pop,Indiv) 
SNPs_MissingRemoved_HWE_LD2_Indivs <- SNPs_MissingRemoved_HWE_LD2_PopIndiv

#load genepop file
SNPs_MissingRemoved_HWE_LD2_GP <- read.genepop(file = "/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.gen", ncode=3)
SNPs_MissingRemoved_HWE_LD2_GP #Levels: 29W2242635 HM22_42275 Bio2242698 ESI2342156 GM2242438 IC2342188 SI2242505
#fix the pop names
levels(SNPs_MissingRemoved_HWE_LD2_GP) <- c("29W","BI","Bio","ESI","GM","IC","SI")

SNPs_MissingRemoved_HWE_LD2_RelatedMatrix <- stamppGmatrix(stamppConvert(SNPs_MissingRemoved_HWE_LD2_GP, type="genlight"))
SNPs_MissingRemoved_HWE_LD2_RelatedMatrix <- data.frame(SNPs_MissingRemoved_HWE_LD2_RelatedMatrix) #convert to DF
colnames(SNPs_MissingRemoved_HWE_LD2_RelatedMatrix) <- rownames(SNPs_MissingRemoved_HWE_LD2_RelatedMatrix) #set column names to match rownames
SNPs_MissingRemoved_HWE_LD2_RelatedMatrix <- SNPs_MissingRemoved_HWE_LD2_RelatedMatrix %>% 
  rownames_to_column(var = "IID") %>% 
  relocate(IID) #set IID as the first column

#keep only lower triangle of matrix
SNPs_MissingRemoved_HWE_LD2_RelatedMatrix_Upper <- SNPs_MissingRemoved_HWE_LD2_RelatedMatrix
SNPs_MissingRemoved_HWE_LD2_RelatedMatrix_Upper[,2:473][upper.tri(SNPs_MissingRemoved_HWE_LD2_RelatedMatrix_Upper[,2:473])] <- NA

#set column with IID
SNPs_MissingRemoved_HWE_LD2_Related_Long <- SNPs_MissingRemoved_HWE_LD2_RelatedMatrix_Upper %>% 
  dplyr::rename(Indiv = IID) %>% 
  full_join(SNPs_MissingRemoved_HWE_LD2_PopIndiv) %>% 
  relocate(c("Pop","Indiv")) %>% 
  dplyr::rename(Indiv1 = Indiv) %>% 
  pivot_longer(cols = 3:ncol(.), names_to = "Indiv2", values_to = "Relatedness") %>% 
  filter(!is.na(Relatedness))

#look at range of values
SNPs_MissingRemoved_HWE_LD2_Related_Long_NoSame <- SNPs_MissingRemoved_HWE_LD2_Related_Long %>% 
  filter(Indiv1 != Indiv2)

HalfSibs <- SNPs_MissingRemoved_HWE_LD2_Related_Long_NoSame %>% filter(Relatedness > 0.125)
SecondCousins <- SNPs_MissingRemoved_HWE_LD2_Related_Long_NoSame %>% filter(Relatedness > 0.025 & Relatedness < 0.125) %>% 
  left_join(SNPs_MissingRemoved_HWE_LD2_PopIndiv %>% rename(Indiv2 = Indiv), by = "Indiv2")
SecondCousinsPopComp <- SecondCousins %>% 
  dplyr::select(Pop.x,Pop.y) %>% 
  distinct() %>% 
  mutate(Comp = 1) %>% 
  arrange(Pop.x,Pop.y) %>% 
  pivot_wider(names_from = Pop.y, values_from = Comp)

histogram <- ggplot(SNPs_MissingRemoved_HWE_LD2_Related_Long_NoSame, aes(x = Relatedness)) +
  geom_histogram(binwidth=0.001, fill = "deeppink4")+
  ylab("Count")+
  theme_bw(base_size=10) + 
  theme(panel.grid = element_blank(),
        axis.title.x = element_text(vjust = 1.5),
        axis.title.y = element_text(vjust = 0.5),
        plot.margin = unit(c(1,2,0,1), 'mm'))#trbl

HM <- ggheatmap(SNPs_MissingRemoved_HWE_LD2_RelatedMatrix %>% 
                  column_to_rownames("IID"),
                text_position_rows = "left",
                legendName = "Relatedness")+
  xlab("\nIndividual")   +
  ylab("Individual\n")   +
  theme_bw(base_size=10) +
  theme(
    legend.position = "right", 
    legend.title.align=0.5,
    legend.title=element_text(size = 6),
    legend.text=element_text(size = 6),
    # legend.key = element_blank(),
    legend.margin = margin(0,0,0,-5),
    axis.title.x = element_text(vjust = 5),
    axis.text.x = element_blank(),
    axis.title.y = element_text(vjust = -8),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    plot.margin = unit(c(0,0,0,0),"mm"), #t,r,b,l
    panel.border = element_rect(linewidth = 0.5), 
    panel.grid=element_blank(),
    text = element_text(family = "sans")) + 

###per individual heterozygosity
#read in individual and pop names from the .fam file
SNPs_MissingRemoved_HWE_LD2_PopIndiv <- read.delim("/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.fam",sep="",header=F) %>% 
  dplyr::rename(Pop=V1,Indiv=V2) %>% 
  dplyr::select(Pop,Indiv) 
SNPs_MissingRemoved_HWE_LD2_Indivs <- SNPs_MissingRemoved_HWE_LD2_PopIndiv$Indiv
#load genepop file
SNPs_MissingRemoved_HWE_LD2_GP <- read.genepop("/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.gen", ncode=3)
SNPs_MissingRemoved_HWE_LD2_GP$pop #Levels: 29W2242635 HM22_42275 Bio2242698 ESI2342156 GM2242438 IC2342188 SI2242505
#fix the pop names
levels(SNPs_MissingRemoved_HWE_LD2_GP$pop) <- c("29W","BI","Bio","ESI","GM","IC","SI")

SNPs_MissingRemoved_HWE_LD2_GL <- gi2gl(SNPs_MissingRemoved_HWE_LD2_GP)
IndHetRes_SNPs_MissingRemoved_HWE_LD2 <- gl.report.heterozygosity(SNPs_MissingRemoved_HWE_LD2_GL, method="ind")
IndHet_SNPs_MissingRemoved_HWE_LD2 <- IndHetRes_SNPs_MissingRemoved_HWE_LD2 %>% 
  dplyr::rename(Indiv = ind.name,
         HomRef = f.hom.ref,
         HomAlt = f.hom.alt) %>% 
  dplyr::mutate(RowSum = rowSums((.[,2:4]), na.rm=T)) %>% 
  full_join(SNPs_MissingRemoved_HWE_LD2_PopIndiv) %>% 
  relocate("Pop", .before = "Indiv") %>% 
  mutate(Pop = factor(Pop, levels = c("IC","ESI","SI","Bio","GM","BI","29W")))
  
#anova to see if pops differ in het
HetANOVA <- aov(Ho ~ Pop, data = IndHet_SNPs_MissingRemoved_HWE_LD2)

#are resid normal? skewed
hist(HetANOVA$residuals)
car::qqPlot(HetANOVA$residuals, id=F)
shapiro.test(HetANOVA$residuals) #not normal!

#use Kruskal-Wallis test - non parametric anova
KW_HMHet <- kruskal.test(Ho ~ Pop, data = IndHet_SNPs_MissingRemoved_HWE_LD2)
DT_HMHet <- dunnTest(Ho ~ Pop, data = IndHet_SNPs_MissingRemoved_HWE_LD2, method="bonferroni")
DT_HMHet_res <- DT_HMHet$res
#compact letter display for plot to show significance groups
cld <- cldList(comparison = DT_HMHet_res$Comparison,
               p.value = DT_HMHet_res$P.adj,
               threshold=0.05)[1:2]

##plot of het by pop, including cld
HetPlot <- ggplot(IndHet_SNPs_MissingRemoved_HWE_LD2, aes(x=Pop, y=Ho)) +
  geom_boxplot(aes(fill=Pop),colour="grey10", linewidth=0.3) +
  ylab("Observed Heterozygosity") +
  annotate(geom="text", x="IC", y=0.078, label = "b",size=2.5) + #IC
  annotate(geom="text", x="ESI", y=0.0835, label = "ac",size=2.5) + #ESI
  annotate(geom="text", x="SI", y=0.0795, label = "b",size=2.5) + #SI
  annotate(geom="text", x="Bio", y=0.0835, label = "c",size=2.5) + #Bio
  annotate(geom="text", x="GM", y=0.086, label = "ab",size=2.5) + #GM
  annotate(geom="text", x="BI", y=0.0815, label = "abc",size=2.5) + #BI
  annotate(geom="text", x="29W", y=0.0805, label = "ab",size=2.5) + #29W
  scale_fill_manual(values=palette)+
  ggtitle("Observed heterozygosity per population,\nSNPs_MissingRemoved_HWE_LD2, n=8414")+
  theme_bw() +
  theme(plot.title=element_text(size = 10),
        legend.position = "right", 
        legend.title = element_blank(),
        legend.text = element_text(size=8),
        legend.key = element_blank(), 
        axis.text = element_text(size = 8), 
        axis.title.x = element_text(size=10, margin = margin(t=6,r=0,b=0,l=0)),
        axis.title.y = element_text(size=10, margin = margin(t=0,r=8,b=0,l=0)),
        axis.title=element_text(size = 10), 
        panel.border = element_rect(linewidth =0.5),
        plot.margin=unit(c(5,5,7,5), "mm"),
        panel.grid=element_blank()) +
  NULL

########################
##########PCAs##########
########################

#NOTE: Code for only one PCA example is shown, but the same code was used for all PCAs in the manuscript
#colours for plotting
palette <- c("IC" = "#1B9E77","ESI" = "#D95F02","29W" = "#7570B3","BI" = "#E7298A","GM" = "#66A61E","Bio" = "#E6AB02","SI" = "#666666","South"="black")
shapes <-   c("IC" = 21,"ESI" = 24,"29W" = 21,"BI" = 22,"GM" = 25,"Bio" = 23,"SI" = 22)

######R######
library(plyr)
library(reshape2)
library(splitstackshape)
library(tidyverse)
library(pcadapt)

##### Load Metadata #####
#convert ped data to genepop using PGDspider
#read in individual and pop names from the .fam file
SNPs_MissingRemoved_HWE_LD2_PopIndiv <- read.delim("/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.fam",sep="",header=F) %>% 
  dplyr::rename(Pop=V1,Indiv=V2) %>% 
  dplyr::select(Pop,Indiv) 
SNPs_MissingRemoved_HWE_LD2_Indivs <- SNPs_MissingRemoved_HWE_LD2_PopIndiv

#read in metadata
AllSample_metadata <- read.csv("/data/AllMetadata.csv") %>% 
  dplyr::select(SampleID,Pop,Sex,Total_Age) %>% 
  dplyr::rename(ID=SampleID)

#read in SNP names from the .bim file
SNPs_MissingRemoved_HWE_LD2_SNPs <- read.delim("/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.bim",sep="",header=F) %>% 
  dplyr::rename(SNP=V2) %>% 
  dplyr::select(SNP)
SNPs_MissingRemoved_HWE_LD2_SNPs <- SNPs_MissingRemoved_HWE_LD2_SNPs[[1]]

##### Load Genetic Data #####
SNPs_MissingRemoved_HWE_LD2_PCAdapt <- read.pcadapt(input = "/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.bed", type="bed")

#Run PCadapt
PCA_SNPs_MissingRemoved_HWE_LD2 <- pcadapt(SNPs_MissingRemoved_HWE_LD2_PCAdapt, K=2, min.maf=0.01)
plot(PCA_SNPs_MissingRemoved_HWE_LD2, option = "screeplot") #k=2 is the optimal K
plot(PCA_SNPs_MissingRemoved_HWE_LD2, option = "scores", pop = SNPs_MissingRemoved_HWE_LD2_PopIndiv$Pop)

(PCA_SNPs_MissingRemoved_HWE_LD2$singular.values[1]^2)*100 #PC1 25.2% of explained variance 
(PCA_SNPs_MissingRemoved_HWE_LD2$singular.values[2]^2)*100 #PC2 16.0% of explained variance 

summary(PCA_SNPs_MissingRemoved_HWE_LD2)

PCA_SNPs_MissingRemoved_HWE_LD2_Summary <- as.data.frame(SNPs_MissingRemoved_HWE_LD2_SNPs) %>% 
  dplyr::rename(SNP=SNPs_MissingRemoved_HWE_LD2_SNPs) %>% 
  mutate(AF = PCA_SNPs_MissingRemoved_HWE_LD2$af,
         MAF = PCA_SNPs_MissingRemoved_HWE_LD2$maf,
         Chi = PCA_SNPs_MissingRemoved_HWE_LD2$chi2.stat,
         Pval = PCA_SNPs_MissingRemoved_HWE_LD2$pvalues,
         Mahal = PCA_SNPs_MissingRemoved_HWE_LD2$stat)

#output coordinates for individuals
PCA_SNPs_MissingRemoved_HWE_LD2_plotdata <- as.data.frame(PCA_SNPs_MissingRemoved_HWE_LD2$scores) #extract individual coordinates
PCA_SNPs_MissingRemoved_HWE_LD2_plotdata$ID <- SNPs_MissingRemoved_HWE_LD2_PopIndiv$Indiv #set ID
PCA_SNPs_MissingRemoved_HWE_LD2_plotdata$Pop <- SNPs_MissingRemoved_HWE_LD2_PopIndiv$Pop
colnames(PCA_SNPs_MissingRemoved_HWE_LD2_plotdata)  <- c("Axis1","Axis2","ID","Pop")
PCA_SNPs_MissingRemoved_HWE_LD2_plotdata <- PCA_SNPs_MissingRemoved_HWE_LD2_plotdata %>% #add in sex and age info for plotting
  left_join(AllSample_metadata) 

#plot
PCA_SNPs_MissingRemoved_HWE_LD2_plot <- ggplot(PCA_SNPs_MissingRemoved_HWE_LD2_plotdata2, aes(x=Axis1, y=Axis2)) +
  geom_hline(linewidth=1, colour = "black", yintercept = 0) + #horizontal line through the origin
  geom_vline(linewidth=1, colour = "black", xintercept = 0) + #vertical line through the origin
  geom_point(size=3, alpha = 0.7,
             aes(
               shape = Pop,
               fill = Pop,
               colour = Pop #can optionally colour by Age or Sex
             )) + 
  xlab("\nPC1 (25.2%)")   +
  ylab("PC2 (16.0%)\n")   +
  scale_shape_manual(values = shapes) +
  scale_fill_manual(values=palette)+
  scale_colour_manual(values=palette)+
  ggtitle("PCA_SNPs_MissingRemoved_HWE_LD2, n=8414 SNPs")+
  theme_bw() +
  theme(plot.title=element_text(size = 10),
        legend.position = "right", 
        legend.title=element_blank(),
        legend.text = element_text(size=12),
        legend.key = element_blank(),
        legend.margin=margin(0,0,0,0),
        legend.box.margin=margin(r=20),
        axis.text = element_text(size = 8), 
        axis.title.x = element_text(size=10, vjust =3),
        axis.title.y = element_text(size=10, vjust=-3),
        panel.border = element_rect(linewidth =0.5),
        plot.margin = unit(c(1,1,0,0), 'lines'), #t,r,b,l
        panel.grid=element_blank()) +
  NULL
ggsave(PCA_SNPs_MissingRemoved_HWE_LD2_plot, 
       file = "/data/05_Filtered/Aligned/MissingRemoved/PCA_SNPs_MissingRemoved_HWE_LD2_plot.pdf", 
       height = 10,width = 16, units = "in", dpi=1200)


#########################
########Admixture########
#########################
#example script
#cross validation --cv
#set random seed from current time -s time
#run on 45 cores -j45
#supervised using the .pop file --supervised filename

./admixture -s time --cv SNPs_MissingRemoved_HWE_LD2.bed 2 -j45 #k2

#####DETERMINE OPTIMAL K#####
#to figure out optimal K between 1 and 6 with 10-fold cross validation

cd /home/Genomics_Software/admixture_linux-1.3.0

#8414 SNPs
for K in 1 2 3 4 5 6 7; \
do ./admixture --cv=10 -s time /data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.bed $K -j40 | tee /data/05_Filtered/Aligned/MissingRemoved/Admixture/AllSNPslog${K}.out; done

#check CV for lowest CV error
cd /data/05_Filtered/Aligned/MissingRemoved/Admixture/
grep -h CV AllSNPslog*.out

#K=1 has lowest CV error

#####Multiple Runs of K=2#####
#Run 1
./admixture --cv=10 -s time /data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.bed 2 -j45 | tee /data/05_Filtered/Aligned/MissingRemoved/Admixture/AllSNPsK2.Run1.out
#Run 2
./admixture --cv=10 -s time /data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.bed 2 -j45 | tee /data/05_Filtered/Aligned/MissingRemoved/Admixture/AllSNPsK2.Run2.out
#Run 3
./admixture --cv=10 -s time /data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.bed 2 -j45 | tee /data/05_Filtered/Aligned/MissingRemoved/Admixture/AllSNPsK2.Run3.out


###############################
#von Bertalanffy growth curves#
###############################
### Von B models
# for Horse mussel aged data that corresponds with genetic sampled data 
# J. Sameoto, Nov 27 2024; figure code updated Feb-11-2025

######R######
library("stats")
library("nlstools")

dat <- read_delim("/data/Metadata/SNPSampleMetadata.csv")

head(dat)

table(dat$Pop )

summary(dat )

#get rid of rows with NAs for age 
dat <- dat[!is.na(dat$Total_Age),]
dim(dat)
table(dat$Pop )
# what you have to run vonBs on 
#29W  BI Bio ESI  GM  IC  SI 
#64  19  75  58  69   9  31

summary(dat )
#no NAs 

dat$length <- as.numeric(dat$Length_mm) 
dat$age <- as.numeric(dat$Total_Age) 
str(dat)

dat$Pop.f <- as.factor(dat$Pop)
table(dat$Pop.f)

plot(length ~ age, data=dat,pch=19)

dat.orig <- dat

# Comparison of populations 
# Starting values 
svTypical <- vbStarts(length~age,data=dat)
unlist(svTypical)

svTypical <- list(Linf=100,K=0.09,t0=0.2)

svGen <- mapply(rep,svTypical,c(7,7,1))
svGen

# Model - Linf, K, by different population 
vb1 <- length~Linf[Pop.f]*(1-exp(-K[Pop.f]*(age-t0)))
fitGen <- nls(vb1,data=dat,start=svGen)
overview(fitGen)
str(fitGen)

# bootstrap CI 
bootTypical <- nlsBoot(fitGen,niter=1000)
confint(bootTypical,plot=TRUE)
confint(bootTypical)

# residual plots 
dat$res <- residuals(fitGen)
plot(residuals(fitGen))
hist(residuals(fitGen),main="")
plot( dat$res ~ dat$age)
abline(a = 0, b = 0)

#get parameters 
coef <- as.data.frame(summary(fitGen)$coefficients)
coef
coef <- cbind(coef, as.data.frame(confint(bootTypical)))
str(coef)
coef$pop <- c(rep(levels(dat$Pop.f), 2), "applies to all pops")

#write.csv(coef, "data/Metadata/vonBcoef.csv")

### Predict on model 
levels(dat$Pop.f)
#[1] "29W" "BI"  "Bio" "ESI" "GM"  "IC"  "SI" 

new.dat <- data.frame(Pop.f = c(rep("29W",40),rep("BI",40), rep("Bio",40), 
                                rep("ESI",40), rep("GM",40), rep("IC",40),
                                rep("SI",40)), age = rep(seq(1,40, by =1),7))
new.dat$Pop.f <- as.factor(new.dat$Pop.f)

new.dat$pred <- predict(object=fitGen, newdata = new.dat,  asList = TRUE)
head(new.dat)

#Check plot to ensure labelling is correct 
ggplot(data = new.dat, aes(x = age, y = pred, group = Pop.f, color = Pop.f)) + 
  geom_line() + 
  ylab("Length (mm)") + 
  xlab("Age (year)") + 
  geom_point(data = dat, aes(x = age, y = length, group = Pop.f, color = Pop.f))

########################
##########RDAs##########
########################

######R######
library("tidyverse")
library("vegan")
library("sdmpredictors")

###load metadata
HM_metadata <- read_delim("data/Metadata/SNPSampleMetadata.csv")) 

Pop_metadata <- HM_metadata %>% 
  dplyr::select(Pop,PopName,Latitude,Longitude,Start_lat_DD,End_lat_DD,Start_lon_DD,End_long_DD) %>% 
  distinct() %>% filter(PopName != "Georges Bank") %>% 
  mutate(Lat=case_when(is.na(Latitude) ~ ((End_lat_DD+Start_lat_DD)/2), TRUE ~ Latitude), #For cruises, take midpoint for Lat
         Lon=case_when(is.na(Longitude) ~ ((End_long_DD+Start_lon_DD)/2), TRUE ~ Longitude)) %>%  #For cruises, take midpoint for Lon
  dplyr::select(Pop,PopName,Lon,Lat) %>% 
  dplyr::mutate(Pop = factor(Pop, levels = c("IC","ESI","SI","Bio","GM","BI","29W")))

PopIndiv <- HM_metadata %>% dplyr::select(c(Pop,SampleID))

###########Load phenotypic data and vonB curve params
VonB_Data <- read_delim("data/Metadata/vonBcoef.csv")) %>% 
  setNames(c("Param","Value","SD","T","Pval","95Lower","95Upper","Pop")) %>% 
  relocate(Pop, .before = Param) %>% 
  dplyr::mutate(Pop = factor(Pop, levels = c("IC","ESI","SI","Bio","GM","BI","29W")))

VonB_RDAData <- VonB_Data %>% 
  filter(Param == "Linf") %>% 
  dplyr::select(Pop,Value) %>% 
  dplyr::rename(Linf = Value) %>% 
  mutate(LinfScale=scale(Linf)[,1])

###########Load Individual Read Depths
#read in individual and pop names from the .fam file
SNPs_MissingRemoved_HWE_LD2_PopIndiv <- read.delim("/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.fam",sep="",header=F) %>% 
  dplyr::rename(Pop=V1,Indiv=V2) %>% 
  dplyr::select(Pop,Indiv)
SNPs_MissingRemoved_HWE_LD2_Indivs <- SNPs_MissingRemoved_HWE_LD2_PopIndiv

#read in SNP names from the .bim file
SNPs_MissingRemoved_HWE_LD2_SNPs <- read.delim("/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.bim",sep="",header=F) %>% 
  dplyr::rename(SNP=V2) %>% 
  dplyr::select(SNP)
SNPs_MissingRemoved_HWE_LD2_SNPs <- SNPs_MissingRemoved_HWE_LD2_SNPs[[1]]

#load total depth per SNP per sample
SNPs_MissingRemoved_HWE_LD2_SampleIDs <- read.delim("/data/04_Aligned/gStacks/VCFSampleIDs.txt",header=F,na.strings = ".")[[1]]
SNPs_MissingRemoved_HWE_LD2_Depths <- read.delim("/data/04_Aligned/gStacks/ReadDepthPerSNPPerIndiv.txt",header=F,na.strings = ".") %>% 
  setNames(c("Name",SNPs_MissingRemoved_HWE_LD2_SampleIDs)) %>% 
  dplyr::mutate(Name2=Name) %>% 
  separate_wider_delim(cols=Name2, delim = " ", names=c("CHROM","POS","SNP","Junk")) %>% 
  dplyr::mutate(SNP = str_replace(SNP,":","_")) %>% 
  dplyr::mutate(SNP = str_remove(SNP, "[:][+]")) %>% 
  dplyr::mutate(SNP = str_remove(SNP, "[:][-]")) %>% 
  relocate(SNP, .before=Name) %>% 
  dplyr::select(!c(Name,CHROM,POS,Junk)) %>% 
  filter(SNP %in% SNPs_MissingRemoved_HWE_LD2_SNPs) %>% #keep only the SNPs that are in the dataset
  dplyr::select(c(SNP, all_of(SNPs_MissingRemoved_HWE_LD2_Indivs))) %>% #keep only the columns for the individuals in the final dataset
  mutate(TotalSNPDepth = rowSums(.[2:ncol(.)], na.rm=T)) %>% 
  mutate(MeanSNPDepth = round(rowMeans(.[,2:ncol(.)], na.rm=T))) %>% 
  relocate(c(TotalSNPDepth,MeanSNPDepth), .after=SNP) 

#total and mean depth per indiv
SNPs_MissingRemoved_HWE_LD2_TotalIndivDepths <- SNPs_MissingRemoved_HWE_LD2_Depths %>% 
  dplyr::select(!c(TotalSNPDepth, MeanSNPDepth)) %>% 
  pivot_longer(!SNP,names_to = "SampleID", values_to = "Depth") %>% #transpose so Individuals are rows
  mutate(Depth=as.numeric(Depth)) %>% 
  pivot_wider(names_from = "SNP", values_from = "Depth") %>% 
  mutate(TotalIndivDepth = rowSums(.[,2:ncol(.)], na.rm=T)) %>% 
  relocate(TotalIndivDepth, .after=SampleID) %>% 
  mutate(MeanIndivDepth = round(rowMeans(.[,3:ncol(.)], na.rm=T))) %>% 
  relocate(MeanIndivDepth, .after=TotalIndivDepth) %>% 
  dplyr::select(SampleID,TotalIndivDepth,MeanIndivDepth)

###Load Enviro Data from sdmpredictors
environment.bottom <- load_layers(c("BO22_templtmax_bdmean", 
                                    "BO22_templtmin_bdmean", 
                                    "BO22_dissoxltmax_bdmean",
                                    "BO22_dissoxltmin_bdmean",
                                    "BO22_salinityltmax_bdmean",
                                    "BO22_salinityltmin_bdmean"))

environment.surface <- load_layers(c("BO22_templtmax_ss",
                                     "BO22_templtmin_ss",
                                     "BO22_dissoxltmax_ss",
                                     "BO22_dissoxltmin_ss",
                                     "BO22_salinityltmax_ss",
                                     "BO22_salinityltmin_ss"))

#extract data for my sites specifically
HM.sites.environment <- data.frame(Pop=Pop_metadata$Pop, #set pop ID
                                   Pop2=Pop_metadata$Pop, #create dummy var to convert to rowname
                                   Lon=Pop_metadata$Lon,
                                   Lat=Pop_metadata$Lat,
                                   raster::extract(environment.bottom,Pop_metadata[,3:4]),#extract the environment data for each point
                                   raster::extract(environment.surface,Pop_metadata[,3:4]) ) %>%   
  column_to_rownames("Pop2")

#scale enviro data to 0 mean and unit variance (subtract mean and divide by SD)
foo <- HM.sites.environment[,4:ncol(HM.sites.environment)] #make dummy variable of the enviro data I want to standardize
foo.scale <- scale(foo) #standardize the variables
colnames(foo.scale) <- paste(colnames(foo.scale), "stand", sep="_") #rename the standardized variables
HM.sites.environment.scale <- cbind(HM.sites.environment, foo.scale) #%>% #bind the standardized data back in (haven't changed row order so should all be in the same order)
# dplyr::select(c(1:4,29:ncol(.),5:28)) #reorder by column location
rm(foo,foo.scale) #remove dummy vars
rownames(HM.sites.environment.scale) <- HM.sites.environment.scale$Pop

###Enviro PCA
#Run enviro PCA and extract the PCs to use as variables in the RDA
#use dudi.pca from ade4 to run the pca

#data stored in the dudi.pca
# c1 --> LOADING of Vars, column normed scores (how much each variable contributes to the PC) --> gives the variables' coordinates, normed to 1 (enviro vars) --> qualitative, which variables contribute to the PCs
# l1 --> LOADING of Sites, row normed scores --> gives the sites' coordinates, normed to 1 (sample sites)
# co --> Coordinates of Vars --> gives the variables' coordinates, normed to the square root of the eigenvalues (enviro vars) --> arrows on plot, how much each var in pulling the PCA
# li --> Coordinates of Sites --> gives the sites' coordinates, normed to the square root of the eigenvalues. It's also called the individuals' scores (sample sites) -> extract for RDA vars

HM_Enviro_Sites_PCA <- dudi.pca(HM.sites.environment.scale %>% dplyr::select(c("BO22_templtmax_bdmean_stand","BO22_templtmin_bdmean_stand",
                                                                              "BO22_dissoxltmax_bdmean_stand","BO22_dissoxltmin_bdmean_stand",
                                                                              "BO22_salinityltmax_bdmean_stand","BO22_salinityltmin_bdmean_stand",
                                                                              "BO22_templtmax_ss_stand","BO22_templtmin_ss_stand",
                                                                              "BO22_dissoxltmax_ss_stand","BO22_dissoxltmin_ss_stand",
                                                                              "BO22_salinityltmax_ss_stand","BO22_salinityltmin_ss_stand")),
                                               center=F,scale=F, #centering and scaling already done manually
                                               scannf=F, nf=6) #view screeplot to see how many axes to keep

#extract individual coordinates for plotting - PCs over 10% variance
HM_Sites_PCAData <- HM.sites.environment.scale[,1:3]
HM_Sites_PCAData$PC1 <- HM_Enviro_Sites_PCA$li[,1]
HM_Sites_PCAData$PC2 <- HM_Enviro_Sites_PCA$li[,2]

#plot
EnviroPCASites_plot <- ggplot(HM_Sites_PCAData, aes(x=PC1, y=PC2)) +
  geom_hline(linewidth=0.3, colour = "grey50", yintercept = 0) + #horizontal line through the origin
  geom_vline(linewidth=0.3, colour = "grey50", xintercept = 0) + #vertical line through the origin
  geom_point(size=2, aes(shape = Pop,fill = Pop,colour = Pop)) + 
  xlab("PC1 (60.8%)")   +
  ylab("PC2 (22.6%)")   +
  scale_shape_manual(values=shapes)+
  scale_fill_manual(values=palette)+
  scale_colour_manual(values=palette)+
  theme_bw(base_size=10) +
  theme(
    legend.position = "none",
    axis.title.x = element_text(size=8,vjust=1.5,margin = unit(c(3,0,0,0), "mm")),
    axis.title.y = element_text(size=8,vjust=-1, margin = unit(c(0,3,0,0), "mm")),
    plot.margin = unit(c(0,0,0,-5),"mm"), #t,r,b,l
    panel.border = element_rect(linewidth = 0.5), 
    panel.grid=element_blank(),
    text = element_text(family = "sans")
  ) +
  NULL

###Extract Enviro PCs and Add vonB Data and read depth
HM_Sites_EnviroPhenoData <- HM_Sites_PCAData %>% 
  full_join(VonB_RDAData) %>% 
  dplyr::select(!Linf) #keep only LinfScale

#create a df with enviro data for all indivs and add PC scores
HM_Indivs_EnviroPhenoData <- inner_join(HM_metadata[,c(1,3)],HM_Sites_EnviroPhenoData) %>% 
  left_join(SNPs_MissingRemoved_HWE_LD2_TotalIndivDepths)

#RDAs
#load data in RAW format (from plink) for RDA
SNPs_MissingRemoved_HWE_LD2 <- fread("/data/05_Filtered/Aligned/MissingRemoved/SNPs_MissingRemoved_HWE_LD2.raw", stringsAsFactors = F, data.table = F) %>%
  dplyr::rename(Pop = FID,
                SampleID=IID)

#extract just the genotypes and impute missing data - replace with most common genotype
GenIndivData <- SNPs_MissingRemoved_HWE_LD2[,7:ncol(SNPs_MissingRemoved_HWE_LD2)] %>%
  `rownames<-`(., SNPs_MissingRemoved_HWE_LD2$SampleID)  #add individual name as rowname
(sum(is.na(GenIndivData))/(sum(is.na(GenIndivData)+!is.na(GenIndivData))))*100 #6.8% missing data before imputation

GenIndivData_Impute <- apply(GenIndivData, 2, function(x) replace(x, is.na(x), as.numeric(names(which.max(table(x))))))
(sum(is.na(GenIndivData_Impute[,2:ncol(GenIndivData_Impute)]))/(sum(is.na(GenIndivData_Impute[,2:ncol(GenIndivData_Impute)])+!is.na(GenIndivData_Impute[,2:ncol(GenIndivData_Impute)]))))*100 #0% missing data after imputation
GenIndivData_Impute <- as.data.frame(GenIndivData_Impute) %>% 
  rownames_to_column("SampleID")
GenIndivData_Impute <- GenIndivData_Impute %>% 
  left_join(PopIndiv) %>% 
  relocate(Pop, .before=SampleID) %>% 
  arrange(SampleID)

HM_Indivs_EnviroPhenoData_forRDA <- HM_Indivs_EnviroPhenoData %>% #join in the Pop/SampleID from the GenData to ensure the same order
  right_join(GenIndivData_Impute %>% dplyr::select(c(Pop,SampleID))) %>% 
  relocate(SampleID, .after=Pop) %>% 
  arrange(SampleID)

#gen/env RDA
GenEnvPCA_RDA <- rda(GenIndivData_Impute[,3:ncol(GenIndivData_Impute)] ~ PC1 + PC2 + LinfScale,
                     data=HM_Indivs_EnviroPhenoData_forRDA,
                     center=F, scale=F)
summary(GenEnvPCA_RDA)
RsquareAdj(GenEnvPCA_RDA) #0.000465953 = 0.05%

#GenEnvPCA_RDA Plot
summary(eigenvals(GenEnvPCA_RDA, model = "constrained")) 
RsquareAdj(GenEnvPCA_RDA) #0.000465953
plot(GenEnvPCA_RDA, scaling=1)

#extract important data for ggplot
IndivPoints_GenEnvPCA_RDA <- as.data.frame(scores(GenEnvPCA_RDA, 
                                                  scaling = 3,
                                                  display = "sites")) %>% 
  cbind(GenIndivData_Impute %>% dplyr::select(c(SampleID,Pop))) %>% 
  dplyr::mutate(Pop = factor(Pop, levels = c("IC","ESI","SI","Bio","GM","BI","29W")))
EnvArrows_GenEnvPCA_RDA <- as.data.frame(scores(GenEnvPCA_RDA, 
                                                scaling = 2,
                                                display = "bp")) %>% 
  dplyr::mutate(Labels = c("PC1","PC2",paste0("L[INF]")))
round(100*(summary(GenEnvPCA_RDA)$cont$importance[2, 1:4]), 3) 

GenEnvPCA_RDA_plot <- ggplot(IndivPoints_GenEnvPCA_RDA, aes(x=RDA1, y=RDA2))+
  geom_hline(linewidth=0.3, colour = "grey50", yintercept = 0) + #horizontal line through the origin
  geom_vline(linewidth=0.3, colour = "grey50", xintercept = 0) + #vertical line through the origin
  geom_segment(data = EnvArrows_GenEnvPCA_RDA, aes(x=0, xend=RDA1, y=0, yend=RDA2), 
               arrow = arrow(length = unit(0.25, "cm")),
               colour = "navy", linewidth = 0.4) +#env arrows
  geom_text_repel(data = EnvArrows_GenEnvPCA_RDA, aes(x=RDA1, y=RDA2,label = Labels), 
                  size = 2,colour = "navy",parse = T,
                  segment.color=NA,box.padding=0,
                  nudge_x =c(0.06,-0.08,0.01),#PC1,PC2,Linf
                  nudge_y =  c(-0.02,0,0.06)) + #labels for env arrows
  geom_point(data = IndivPoints_GenEnvPCA_RDA, size=0.5, alpha = 0.7, 
             aes(shape=Pop,fill=Pop,colour=Pop)) + #sample  points
  scale_shape_manual(values = shapes) +
  scale_fill_manual(values=palette)+
  scale_colour_manual(values=palette)+
  annotate("text",x=-0.4,y=0.64,label=paste("Adjusted~R^2"," == 0.0005"), parse=T,vjust=0,hjust=1, size=2) +
  xlab("RDA1\n(24.3% of explained variance)") +
  ylab("RDA2\n(22.2% of explained variance)") +
  guides(
    fill = guide_legend(override.aes = list(size = 2),byrow = TRUE,keyheight=0.7,keywidth=0.01),
    colour = guide_legend(override.aes = list(size = 2),byrow = TRUE,keyheight=0.7,keywidth=0.01),
    shape = guide_legend(override.aes = list(size = 2),byrow = TRUE,keyheight=0.7,keywidth=0.01)
  )+
  theme_bw(base_size=10) +
  theme(
    legend.position = "right", 
    legend.title=element_blank(),
    legend.key = element_blank(),
    legend.margin = margin(0,0,0,-5),
    axis.title.x = element_text(size=8,vjust=5,margin = unit(c(4,0,0,0), "mm")),
    axis.title.y = element_text(size=8,vjust=-4, margin = unit(c(0,4,0,0), "mm")),
    plot.margin = unit(c(0,0,0,0),"mm"), #t,r,b,l
    panel.border = element_rect(linewidth = 0.5),
    panel.grid=element_blank(),
    text = element_text(family = "sans")
  ) +
  NULL

#gen/env RDA conditioned on geographic info
GenEnvPCA_GeogCond_RDA <- rda(GenIndivData_Impute[,3:ncol(GenIndivData_Impute)] ~ PC1 + PC2 + LinfScale + Condition(Lat + Lon),
                              data=HM_Indivs_EnviroPhenoData_forRDA,
                              center=F, scale=F)
summary(GenEnvPCA_GeogCond_RDA)
RsquareAdj(GenEnvPCA_GeogCond_RDA) #0.0004676231
round(100*(summary(GenEnvPCA_GeogCond_RDA)$cont$importance[2, 1:4]), 3) 

#extract important data for ggplot
SNPPoints_GenEnvPCA_GeogCond_RDA <- as.data.frame(scores(GenEnvPCA_GeogCond_RDA, scaling = 3, display = "species"))
IndivPoints_GenEnvPCA_GeogCond_RDA <- as.data.frame(scores(GenEnvPCA_GeogCond_RDA, scaling = 3, display = "sites")) %>% 
  cbind(GenIndivData_Impute %>% dplyr::select(c(SampleID,Pop))) %>% 
  dplyr::mutate(Pop = factor(Pop, levels = c("IC","ESI","SI","Bio","GM","BI","29W")))
EnvArrows_GenEnvPCA_GeogCond_RDA <- as.data.frame(scores(GenEnvPCA_GeogCond_RDA, scaling = 2, display = "bp")) %>% 
  dplyr::mutate(Labels = c("PC1","PC2",paste0("L[INF]")))

GenEnvPCA_GeogCond_RDA_plot <- ggplot(IndivPoints_GenEnvPCA_GeogCond_RDA, aes(x=RDA1, y=RDA2))+
  geom_hline(linewidth=0.3, colour = "grey50", yintercept = 0) + #horizontal line through the origin
  geom_vline(linewidth=0.3, colour = "grey50", xintercept = 0) + #vertical line through the origin
  geom_segment(data = EnvArrows_GenEnvPCA_GeogCond_RDA, aes(x=0, xend=RDA1, y=0, yend=RDA2), 
               arrow = arrow(length = unit(0.25, "cm")),
               colour = "navy", linewidth = 0.4) +#env arrows
  geom_text_repel(data = EnvArrows_GenEnvPCA_GeogCond_RDA, aes(x=RDA1, y=RDA2,label = Labels), 
                  size = 2,colour = "navy",parse = T,
                  segment.color=NA,box.padding=0,
                  nudge_x =c(-0.06,0.075,0.01),#PC1,PC2,Linf
                  nudge_y =  c(0,0.01,0.055)) + #labels for env arrows
  geom_point(data = IndivPoints_GenEnvPCA_GeogCond_RDA, size=0.5, alpha = 0.7, 
             aes(shape=Pop,fill=Pop,colour=Pop)) + #sample  points
  scale_shape_manual(values = shapes) +
  scale_fill_manual(values=palette)+
  scale_colour_manual(values=palette)+
  ylim(c(-0.65,0.7)) + 
  annotate("text",x=-0.28,y=0.68,label=paste("Adjusted~R^2"," == 0.0005"), parse=T,vjust=0,hjust=1, size=2) +
  xlab("RDA1\n(24.3% of explained variance)") +
  ylab("RDA2\n(22.6% of explained variance)") +
  guides(
    fill = guide_legend(override.aes = list(size = 2),byrow = TRUE,keyheight=0.7,keywidth=0.01),
    colour = guide_legend(override.aes = list(size = 2),byrow = TRUE,keyheight=0.7,keywidth=0.01),
    shape = guide_legend(override.aes = list(size = 2),byrow = TRUE,keyheight=0.7,keywidth=0.01)
  )+
  theme_bw(base_size=10) +
  theme(
    legend.position = "right", 
    legend.title=element_blank(),
    legend.key = element_blank(),
    legend.margin = margin(0,0,0,-5),
    axis.title.x = element_text(size=8,vjust=5,margin = unit(c(4,0,0,0), "mm")),
    axis.title.y = element_text(size=8,vjust=-4, margin = unit(c(0,4,0,0), "mm")),
    plot.margin = unit(c(0,0,0,-5),"mm"), #t,r,b,l
    panel.border = element_rect(linewidth = 0.5), 
    panel.grid=element_blank(),
    text = element_text(family = "sans")
  ) +
  NULL

#gen/env RDA conditioned on read depth
GenEnvPCA_DepthCond_RDA <- rda(GenIndivData_Impute[,3:ncol(GenIndivData_Impute)] ~ PC1 + PC2 + LinfScale + Condition(TotalIndivDepth),
                              data=HM_Indivs_EnviroPhenoData_forRDA,
                              center=F, scale=F)
summary(GenEnvPCA_DepthCond_RDA)
RsquareAdj(GenEnvPCA_DepthCond_RDA) #0.0003916704
round(100*(summary(GenEnvPCA_DepthCond_RDA)$cont$importance[2, 1:4]), 3) 

#extract important data for ggplot
SNPPoints_GenEnvPCA_DepthCond_RDA <- as.data.frame(scores(GenEnvPCA_DepthCond_RDA, scaling = 3, display = "species"))
IndivPoints_GenEnvPCA_DepthCond_RDA <- as.data.frame(scores(GenEnvPCA_DepthCond_RDA, scaling = 3, display = "sites")) %>% 
  cbind(GenIndivData_Impute %>% dplyr::select(c(SampleID,Pop))) %>% 
  dplyr::mutate(Pop = factor(Pop, levels = c("IC","ESI","SI","Bio","GM","BI","29W")))
EnvArrows_GenEnvPCA_DepthCond_RDA <- as.data.frame(scores(GenEnvPCA_DepthCond_RDA, scaling = 2, display = "bp")) %>% 
  dplyr::mutate(Labels = c("PC1","PC2",paste0("L[INF]")))

GenEnvPCA_DepthCond_RDA_plot <- ggplot(IndivPoints_GenEnvPCA_DepthCond_RDA, aes(x=RDA1, y=RDA2))+
  geom_hline(linewidth=0.3, colour = "grey50", yintercept = 0) + #horizontal line through the origin
  geom_vline(linewidth=0.3, colour = "grey50", xintercept = 0) + #vertical line through the origin
  geom_segment(data = EnvArrows_GenEnvPCA_DepthCond_RDA, aes(x=0, xend=RDA1, y=0, yend=RDA2), 
               arrow = arrow(length = unit(0.25, "cm")),
               colour = "navy", linewidth = 0.4) +#env arrows
  geom_text_repel(data = EnvArrows_GenEnvPCA_DepthCond_RDA, aes(x=RDA1, y=RDA2,label = Labels), 
                  size = 2,colour = "navy",parse = T,
                  segment.color=NA,box.padding=0,
                  nudge_x =c(0.08,0.075,0.01),#PC1,PC2,Linf
                  nudge_y =  c(0.01,0.04,-0.06)) + #labels for env arrows
  geom_point(data = IndivPoints_GenEnvPCA_DepthCond_RDA, size=0.5, alpha = 0.7, 
             aes(shape=Pop,fill=Pop,colour=Pop)) + #sample  points
  scale_shape_manual(values = shapes) +
  scale_fill_manual(values=palette)+
  scale_colour_manual(values=palette)+
  annotate("text",x=-0.37,y=0.94,label=paste("Adjusted~R^2"," == 0.0004"), parse=T,vjust=0,hjust=1, size=2) +
  xlab("RDA1\n(23.7% of explained variance)") +
  ylab("RDA2\n(22.2% of explained variance)") +
  guides(
    fill = guide_legend(override.aes = list(size = 2),byrow = TRUE,keyheight=0.7,keywidth=0.01),
    colour = guide_legend(override.aes = list(size = 2),byrow = TRUE,keyheight=0.7,keywidth=0.01),
    shape = guide_legend(override.aes = list(size = 2),byrow = TRUE,keyheight=0.7,keywidth=0.01)
  )+
  theme_bw(base_size=10) +
  theme(
    legend.position = "right", 
    legend.title=element_blank(),
    legend.key = element_blank(),
    legend.margin = margin(0,0,0,-5),
    axis.title.x = element_text(size=8,vjust=5,margin = unit(c(4,0,0,0), "mm")),
    axis.title.y = element_text(size=8,vjust=-4, margin = unit(c(0,4,0,0), "mm")),
    plot.margin = unit(c(0,0,0,0),"mm"), #t,r,b,l
    panel.border = element_rect(linewidth = 0.5), 
    panel.grid=element_blank(),
    text = element_text(family = "sans")
  ) +
  NULL